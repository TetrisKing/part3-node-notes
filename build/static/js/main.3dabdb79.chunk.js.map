{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","length","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","catch","error","console","log","notesToShow","filter","map","key","find","n","updatedNote","setTimeout","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","type","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"kNAWeA,G,MARF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,gBAAkB,YAC/C,OAAQ,wBAAIC,UAAU,QACjBJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,M,wBCNtCK,EAAU,kCAsBD,EApBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,4BAAQA,EAASC,MAAjB,CAAsB,CAC9C,GAAM,IACN,QAAW,cACX,KAAQ,2BACR,WAAa,SAcN,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCV9BK,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OACI,yBAAKd,UAAWc,EAAQC,OAAS,EAAI,QAAU,IAC1CD,ICgFEE,EA/EH,SAACC,GAAW,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEWF,mBAAS,IAFpB,mBAEZG,EAFY,KAEHC,EAFG,OAGWJ,oBAAS,GAHpB,mBAGZK,EAHY,KAGHC,EAHG,OAIqBN,mBAAS,IAJ9B,mBAIZO,EAJY,KAIEC,EAJF,KAMnBC,qBAAU,WACNC,IAEKtB,MAAK,SAACC,GAAD,OAAca,EAASb,MAC5BsB,OAAM,SAAAC,GACHC,QAAQC,IAAI,qBAErB,IAEH,IAsBMC,EAAcV,EAAUJ,EAAQA,EAAMe,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAqBhE,OACI,6BACI,qCACA,kBAAC,EAAD,CAAce,QAASW,IACvB,6BACI,4BAAQvB,QAAS,kBAAMsB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACKU,EAAYE,KAAI,SAAAvC,GAAI,OAAI,kBAAC,EAAD,CAAMwC,IAAKxC,EAAKe,GAAIf,KAAMA,EAAMC,iBAAkB,kBA9B9D,SAACc,GACtB,IAAIf,EAAOuB,EAAMkB,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAOA,KAChC4B,EAAW,2BAAQ3C,GAAR,IAAcG,WAAYH,EAAKG,YAE9C6B,EACYjB,EAAI4B,GACXjC,MAAK,SAAAC,GACFa,EAASD,EAAMgB,KAAI,SAAAvC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAOW,SAEtDsB,OAAM,SAAAC,GACHJ,EAAgB,SAAD,OACF9B,EAAKK,QADH,sCAGfuC,YAAW,WACPd,EAAgB,MACjB,KACHN,EAASD,EAAMe,QAAO,SAAAI,GAAC,OAAIA,EAAE3B,KAAOA,SAc6Cd,CAAiBD,EAAKe,WAE3G,0BAAM8B,SAvDE,SAACC,GACbA,EAAMC,iBAEN,IAAMC,EAAa,CACf3C,QAASoB,EACTwB,MAAM,IAAIC,MAAOC,cACjBhD,UAAWiD,KAAKC,SAAW,IAG/BrB,EACYgB,GACPtC,MAAK,SAAAC,GACFa,EAASD,EAAM+B,OAAO3C,IACtBe,EAAW,SA2CX,2BAAO6B,KAAK,OAAOC,MAAO/B,EAASgC,SAvCtB,SAACX,GACtBX,QAAQC,IAAIX,GACZC,EAAWoB,EAAMY,OAAOF,UAsChB,4BAAQD,KAAK,UAAb,eC1EhBI,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.3dabdb79.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./note.css\"\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    let label = note.important ? \"Not Important\" : \"Important\"\r\n    return (<li className='note'>\r\n        {note.content}\r\n        <button onClick={toggleImportance}>{label}</button>\r\n        </li>)\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => [...response.data,{\r\n        \"id\": 1000,\r\n        \"content\": \"-FAKE NOTE-\",\r\n        \"date\": \"2019-05-30T17:30:31.098Z\",\r\n        \"important\": true\r\n      }])\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll: getAll, \r\n    create: create, \r\n    update: update \r\n}","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    return (\r\n        <div className={message.length > 0 ? \"error\" : \"\"}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from \"react\";\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\nimport Notification from './components/Notification'\r\n\r\n\r\nconst App = (props) => {\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState('')\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        noteService\r\n            .getAll()\r\n            .then((response) => setNotes(response))\r\n            .catch(error => {\r\n                console.log('promise fail')\r\n            })\r\n    }, []);\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault();\r\n\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() < 0.5,\r\n        }\r\n\r\n        noteService\r\n            .create(noteObject)\r\n            .then(response => {\r\n                setNotes(notes.concat(response))\r\n                setNewNote('')\r\n            })\r\n    }\r\n\r\n    const handleNoteChange = (event) => {\r\n        console.log(newNote);\r\n        setNewNote(event.target.value);\r\n    }\r\n\r\n    const notesToShow = showAll ? notes : notes.filter(note => note.important)\r\n    const toggleImportance = (id) => {\r\n        let note = notes.find(n => n.id === id);\r\n        let updatedNote = { ...note, important: !note.important }\r\n\r\n        noteService\r\n            .update(id, updatedNote)\r\n            .then(response => {\r\n                setNotes(notes.map(note => note.id !== id ? note : response));\r\n            })\r\n            .catch(error => {\r\n                setErrorMessage(\r\n                    `Note '${note.content}' was already removed from server`\r\n                )\r\n                setTimeout(() => {\r\n                    setErrorMessage('')\r\n                }, 5000)\r\n                setNotes(notes.filter(n => n.id !== id))\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage} />\r\n            <div>\r\n                <button onClick={() => setShowAll(!showAll)}>\r\n                    Show {showAll ? 'Important' : 'All'}\r\n                </button>\r\n            </div>\r\n            <ul>\r\n                {notesToShow.map(note => <Note key={note.id} note={note} toggleImportance={() => toggleImportance(note.id)} />)}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                <input type=\"text\" value={newNote} onChange={handleNoteChange} />\r\n                <button type=\"submit\">Add Note</button>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}